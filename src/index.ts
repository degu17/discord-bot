import { Client, GatewayIntentBits, Events, MessageFlags } from 'discord.js';
import { CommandRegistry } from './services/commandRegistry';
import { HitBlowCommand } from './commands/hitblow';
import { TaskCommand } from './commands/task';
import { ModTestCommand } from './commands/modtest';
import { PermissionChecker } from './utils/permissionChecker';

// RailwayÁí∞Â¢ÉÂ§âÊï∞„ÉÜ„Çπ„Éà
console.log('=== Discord Bot Starting ===');
console.log('Node.js version:', process.version);
console.log('Platform:', process.platform);
console.log('Environment:', process.env.NODE_ENV || 'development');

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË®≠ÂÆöÁä∂Ê≥Å„Çí„É≠„Ç∞Âá∫Âäõ
console.log('üîß Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆöÁä∂Ê≥Å:');
console.log('- DISCORD_TOKEN:', process.env.DISCORD_TOKEN ? '‚úÖ Ë®≠ÂÆöÊ∏à„Åø' : '‚ùå Êú™Ë®≠ÂÆö');
console.log('- CLIENT_ID:', process.env.DISCORD_CLIENT_ID ? '‚úÖ Ë®≠ÂÆöÊ∏à„Åø' : '‚ùå Êú™Ë®≠ÂÆö');
console.log('- NOTION_TOKEN:', process.env.NOTION_TOKEN ? '‚úÖ Ë®≠ÂÆöÊ∏à„Åø' : '‚ùå Êú™Ë®≠ÂÆö');
console.log('- NOTION_TASK_DB_ID:', process.env.NOTION_TASK_DB_ID ? '‚úÖ Ë®≠ÂÆöÊ∏à„Åø' : '‚ùå Êú™Ë®≠ÂÆö');

// Discord Bot „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆ‰ΩúÊàê
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
  ],
});

client.once(Events.ClientReady, async (readyClient) => {
  console.log(`‚úÖ Bot is ready! Logged in as ${readyClient.user.tag}`);
  console.log(`üÜî Client ID: ${readyClient.user.id}`);
  
  // „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆÁôªÈå≤
  try {
    const commandRegistry = new CommandRegistry(
      process.env.DISCORD_TOKEN!,
      process.env.DISCORD_CLIENT_ID!
    );
    
    const commands = CommandRegistry.getAllCommands();
    console.log('üìã Registering commands:', commands.map(c => c.name));
    await commandRegistry.registerCommands(commands);
    console.log('‚úÖ Slash commands registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register commands:', error);
  }
  
  // Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
  console.log('\nüîç Starting permission check...');
  try {
    await PermissionChecker.checkBotPermissions(readyClient);
    const hasPermissions = await PermissionChecker.quickPermissionTest(readyClient);
    
    if (hasPermissions) {
      console.log('‚úÖ „É¢„Éá„É¨„Éº„Ç∑„Éß„É≥Ê©üËÉΩÊ∫ñÂÇôÂÆå‰∫Ü: „É°„ÉÉ„Çª„Éº„Ç∏ÁÆ°ÁêÜ„Éª„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÊ®©Èôê„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Åü');
    } else {
      console.log('‚ö†Ô∏è „É¢„Éá„É¨„Éº„Ç∑„Éß„É≥Ê®©Èôê„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
    }
  } catch (error) {
    console.error('‚ùå Permission check failed:', error);
  }
  
  console.log(`üì± Bot is online and ready to receive commands`);
});

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„Å®„Éú„Çø„É≥„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜ„ÇíÁµ±Âêà
client.on(Events.InteractionCreate, async (interaction) => {
  try {
    // „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆÂá¶ÁêÜ
    if (interaction.isChatInputCommand()) {
      const { commandName } = interaction;

      if (commandName === 'hitblow') {
        const subcommand = interaction.options.getSubcommand();
        
        switch (subcommand) {
          case 'start':
            await HitBlowCommand.handleStart(interaction);
            break;
          case 'join':
            await HitBlowCommand.handleJoin(interaction);
            break;
          case 'send':
            await HitBlowCommand.handleSend(interaction);
            break;
          case 'history':
            await HitBlowCommand.handleHistory(interaction);
            break;
          default:
            await interaction.reply({
              content: '‚ùå ‰∏çÊòé„Å™„Çµ„Éñ„Ç≥„Éû„É≥„Éâ„Åß„Åô„ÄÇ',
              flags: MessageFlags.Ephemeral
            });
        }
      } else if (commandName === 'task') {
        const subcommandGroup = interaction.options.getSubcommandGroup();
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === 'create') {
          await TaskCommand.handleCreate(interaction);
        } else if (subcommandGroup === 'update') {
          switch (subcommand) {
            case 'title':
              await TaskCommand.handleUpdateTitle(interaction);
              break;
            case 'priority':
              await TaskCommand.handleUpdatePriority(interaction);
              break;
            case 'deadline':
              await TaskCommand.handleUpdateDeadline(interaction);
              break;
          }
        } else if (subcommand === 'delete') {
          await TaskCommand.handleDelete(interaction);
        } else if (subcommand === 'confirm') {
          await TaskCommand.handleConfirm(interaction);
        } else {
          await interaction.reply({
            content: '‚ùå ‰∏çÊòé„Å™„Çµ„Éñ„Ç≥„Éû„É≥„Éâ„Åß„Åô„ÄÇ',
            flags: MessageFlags.Ephemeral
          });
        }
      } else if (commandName === 'modtest') {
        console.log('modtest command received');
        const subcommand = interaction.options.getSubcommand();
        
        switch (subcommand) {
          case 'permissions':
            await ModTestCommand.handlePermissions(interaction);
            break;
          case 'channel':
            await ModTestCommand.handleChannel(interaction);
            break;
          default:
            await interaction.reply({
              content: '‚ùå ‰∏çÊòé„Å™„Çµ„Éñ„Ç≥„Éû„É≥„Éâ„Åß„Åô„ÄÇ',
              flags: MessageFlags.Ephemeral
            });
        }
      } else {
        console.log(`Unknown command: ${commandName}`);
        await interaction.reply({
          content: `‚ùå ‰∏çÊòé„Å™„Ç≥„Éû„É≥„Éâ„Åß„Åô: ${commandName}`,
          flags: MessageFlags.Ephemeral
        });
      }
    }
    // „Éú„Çø„É≥„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ
    else if (interaction.isButton()) {
      const customId = interaction.customId;

      if (customId.startsWith('hitblow_join_')) {
        const gameId = customId.replace('hitblow_join_', '');
        const userId = interaction.user.id;

        const { GameManager } = await import('./services/gameManager');
        const gameManager = GameManager.getInstance();

        const game = gameManager.getGame(gameId);
        if (!game) {
          await interaction.reply({
            content: '‚ùå „Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ',
            flags: MessageFlags.Ephemeral
          });
          return;
        }

        const result = gameManager.addParticipant(gameId, userId);
        
        await interaction.reply({
          content: result.success ? `üéÆ ${result.message}` : `‚ùå ${result.message}`,
          flags: MessageFlags.Ephemeral
        });

        if (result.success) {
          console.log(`üë§ ${interaction.user.tag} joined game ${gameId} via button`);
        }
      } else if (customId.startsWith('hitblow_start_')) {
        const gameId = customId.replace('hitblow_start_', '');

        const { GameManager } = await import('./services/gameManager');
        const gameManager = GameManager.getInstance();

        const game = gameManager.getGame(gameId);
        if (!game) {
          await interaction.reply({
            content: '‚ùå „Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ',
            flags: MessageFlags.Ephemeral
          });
          return;
        }

        const result = gameManager.startGame(gameId);
        
        if (result.success) {
          const { EmbedBuilder } = await import('discord.js');
          
          const embed = new EmbedBuilder()
            .setTitle('üöÄ „Ç≤„Éº„É†ÈñãÂßãÔºÅ')
            .setDescription(`ÂèÇÂä†ËÄÖ: ${game.participants.length}‰∫∫\n\n4Ê°Å„ÅÆÊï∞Â≠ó„Çí‰∫àÊÉ≥„Åó„Å¶ \`/hitblow send\` „Ç≥„Éû„É≥„Éâ„ÅßÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ`)
            .addFields(
              { name: 'Âà∂ÈôêÊôÇÈñì', value: '‚è∞ 5ÂàÜ', inline: true },
              { name: 'ÂèÇÂä†ËÄÖÊï∞', value: `üë• ${game.participants.length}‰∫∫`, inline: true }
            )
            .setColor(0x00FF00)
            .setTimestamp();

          await interaction.reply({
            embeds: [embed]
          });

          console.log(`üöÄ Game ${gameId} started by ${interaction.user.tag}`);
        } else {
          await interaction.reply({
            content: `‚ùå ${result.message}`,
            flags: MessageFlags.Ephemeral
          });
        }
      }
    }
  } catch (error) {
    console.error('Interaction handling error:', error);
    
    // „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅåÊó¢„Å´ÂøúÁ≠îÊ∏à„Åø„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (interaction.isChatInputCommand() || interaction.isButton()) {
      // Êó¢„Å´ÂøúÁ≠îÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºà„É≠„Ç∞„ÅÆ„ÅøÂá∫ÂäõÔºâ
      if (interaction.replied || interaction.deferred) {
        console.log('Interaction already responded, skipping error response');
        return;
      }
      
      // Êú™ÂøúÁ≠î„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
      try {
        await interaction.reply({
          content: '‚ùå Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ',
          flags: MessageFlags.Ephemeral
        });
      } catch (replyError) {
        console.error('Reply error:', replyError);
      }
    }
  }
});

client.on(Events.MessageCreate, (message) => {
  if (message.author.bot) return;
  
  // Placeholder for moderation functionality (handled by other member)
  console.log(`Message from ${message.author.tag}: ${message.content}`);
});

const token = process.env.DISCORD_TOKEN;
client.login(token).catch(error => {
  console.error('‚ùå Failed to login to Discord:', error.message);
  process.exit(1);
});